#include <iostream>
#include <fstream>
#include <string>
#include <thread>
#include <chrono>
#include <curl/curl.h>
#include <atomic>

using System.Linq;
using System;

size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* userp)
{
    userp->append((char*)contents, size * nmemb);
    return size * nmemb;
}

std::string fetchFromAPI(const std::string& url)
{
    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    curl = curl_easy_init();
    if (curl)
    {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
        res = curl_easy_perform(curl);
        curl_easy_cleanup(curl);

        if (res != CURLE_OK)
        {
            std::cerr << "Failed to fetch from API: " << curl_easy_strerror(res) << std::endl;
            return "";
        }
    }
    return readBuffer;
}

bool isKeyValid(const std::string& apiKeys, const std::string& inputKey)
{
    return apiKeys.find(inputKey) != std::string::npos;
}

bool containsEycincik(const std::string& apiResponse)
{
    return apiResponse.find("eycincikdersemcik") != std::string::npos;
}

std::atomic<bool> keepRunning(true);

void keyMonitoringThread(const std::string& apiUrl, const std::string& apiKeys, const std::string& storedKey)
{
    while (keepRunning)
    {

        std::string authResponse = fetchFromAPI(apiUrl);
        if (authResponse.empty())
        {
            std::cerr << "Failed to fetch auth data." << std::endl;
            keepRunning = false;
            break;
        }

        if (!containsEycincik(authResponse) || !isKeyValid(apiKeys, storedKey))
        {
            std::cerr << "Key validation failed or unauthorized access detected." << std::endl;
            keepRunning = false;
            break;
        }

        std::this_thread::sleep_for(std::chrono::seconds(10));
    }
}

//  keyFile << userKey;
// keyFile.close();

// std::cout << "Key validation successful." << std::endl;

// std::thread monitorThread(keyMonitoringThread, authUrl, apiKeys, userKey);

// monitorThread.join();

int main()
{
    const std::string apiUrl = "https://broburayakendidomain.com/do.php";
    const std::string authUrl = "https://raw.githubusercontent.com/Grhax/AUTHUMUKIRSANA/refs/heads/main/auth";
    const std::string folderPath = "C:/WIFI";
    const std::string filePath = folderPath + "/KEY";

    std::string apiKeys = fetchFromAPI(apiUrl);
    if (apiKeys.empty())
    {
        std::cerr << "Error fetching keys." << std::endl;
        return 1;
    }

    std::string userKey;
    std::cout << "Enter your key: ";
    std::cin >> userKey;

    if (!isKeyValid(apiKeys, userKey))
    {
        std::cerr << "Invalid key." << std::endl;
        return 1;
    }

    std::string authResponse = fetchFromAPI(authUrl);
    if (authResponse.empty())
    {
        std::cerr << "Error fetching auth data." << std::endl;
        return 1;
    }

    if (!containsEycincik(authResponse))
    {
        std::cerr << "Unauthorized access." << std::endl;
        return 1;
    }

    if (system(("mkdir " + folderPath).c_str()) != 0)
    {
        std::cerr << "Failed to create folder." << std::endl;
        return 1;
    }

    std::ofstream keyFile(filePath);
    if (!keyFile)
    {
        std::cerr << "Failed to create key file." << std::endl;
        return 1;
    }

    keyFile << userKey;
    keyFile.close();

    std::cout << "Key validation successful." << std::endl;

    std::thread monitorThread(keyMonitoringThread, authUrl, apiKeys, userKey);

    monitorThread.join();

    return 0;
}
